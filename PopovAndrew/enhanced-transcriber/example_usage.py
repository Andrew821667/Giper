"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Enhanced Transcriber –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ 95%+
Example usage of Enhanced Transcriber for 95%+ quality
"""

import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from providers.tone import ToneTranscriber
from providers.whisper import WhisperLocalTranscriber, WhisperOpenAITranscriber
from services.ensemble_service import EnsembleTranscriptionService
from core.models.transcription_result import TranscriptionResult

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('enhanced_transcriber.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class EnhancedTranscriberDemo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Enhanced Transcriber –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ 95%+
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ"""
        self.models = []
        self.ensemble_service = None
    
    async def setup_models(self, openai_api_key: str = None) -> List[Dict[str, Any]]:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è ensemble
        
        Args:
            openai_api_key: API –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            List: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
        """
        model_info = []
        
        # 1. T-one (–ª—É—á—à–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
        try:
            tone_model = ToneTranscriber("voicekit/tone-ru")
            self.models.append(tone_model)
            model_info.append({
                "name": "T-one Russian",
                "status": "available",
                "specialization": "Russian language, telephony domain"
            })
            logger.info("‚úÖ T-one model loaded successfully")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è T-one model not available: {e}")
            model_info.append({
                "name": "T-one Russian", 
                "status": "unavailable",
                "reason": str(e)
            })
        
        # 2. Whisper Local (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞)
        try:
            whisper_local = WhisperLocalTranscriber("base", device="auto")
            self.models.append(whisper_local)
            model_info.append({
                "name": "Whisper Local Base",
                "status": "available", 
                "specialization": "Multilingual, general domain"
            })
            logger.info("‚úÖ Whisper Local model loaded successfully")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Whisper Local model not available: {e}")
            model_info.append({
                "name": "Whisper Local Base",
                "status": "unavailable",
                "reason": str(e)
            })
        
        # 3. OpenAI Whisper (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
        if openai_api_key:
            try:
                whisper_openai = WhisperOpenAITranscriber(openai_api_key)
                self.models.append(whisper_openai)
                model_info.append({
                    "name": "OpenAI Whisper",
                    "status": "available",
                    "specialization": "Cloud-based, high quality"
                })
                logger.info("‚úÖ OpenAI Whisper API available")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenAI Whisper not available: {e}")
                model_info.append({
                    "name": "OpenAI Whisper",
                    "status": "unavailable", 
                    "reason": str(e)
                })
        else:
            model_info.append({
                "name": "OpenAI Whisper",
                "status": "skipped",
                "reason": "No API key provided"
            })
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ensemble —Å–µ—Ä–≤–∏—Å–∞
        if len(self.models) >= 2:
            self.ensemble_service = EnsembleTranscriptionService(
                models=self.models,
                target_quality_threshold=0.95  # 95%
            )
            logger.info(f"üöÄ Ensemble service initialized with {len(self.models)} models")
        elif len(self.models) == 1:
            logger.info("‚ÑπÔ∏è Only one model available - ensemble disabled")
        else:
            logger.error("‚ùå No models available for transcription")
        
        return model_info
    
    async def transcribe_audio(
        self, 
        audio_file: str,
        language: str = "ru",
        domain: str = "ecommerce",
        use_ensemble: bool = True
    ) -> TranscriptionResult:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        
        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            language: –Ø–∑—ã–∫
            domain: –î–æ–º–µ–Ω –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
            use_ensemble: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ensemble (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            
        Returns:
            TranscriptionResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        if not Path(audio_file).exists():
            raise FileNotFoundError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        
        logger.info(f"üéµ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {Path(audio_file).name}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —è–∑—ã–∫={language}, –¥–æ–º–µ–Ω={domain}, ensemble={use_ensemble}")
        
        # Ensemble —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if use_ensemble and self.ensemble_service:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ ensemble —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ 95%+")
            result = await self.ensemble_service.transcribe_with_quality_target(
                audio_file=audio_file,
                language=language,
                domain=domain,
                max_iterations=3
            )
            
        # –û–¥–∏–Ω–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å (fallback)
        elif self.models:
            logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏: {self.models[0].model_name}")
            result = await self.models[0].transcribe(audio_file, language)
            
        else:
            raise RuntimeError("–ù–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        return result
    
    def print_transcription_result(self, result: TranscriptionResult):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        print("\\n" + "="*80)
        print("üìù –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò")
        print("="*80)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üéØ –ú–æ–¥–µ–ª—å: {result.model_used}")
        print(f"üåç –Ø–∑—ã–∫: {result.language_detected}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time:.2f} —Å–µ–∫")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {result.file_size / 1024 / 1024:.2f} –ú–ë")
        
        if result.audio_duration:
            print(f"üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {result.audio_duration:.1f} —Å–µ–∫")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ
        if result.quality_metrics:
            print(f"\\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
            print(f"   –û–±—â–∏–π —Å—á–µ—Ç: {result.quality_metrics.overall_score:.1%}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å: {result.quality_metrics.quality_level.value}")
            if result.quality_metrics.word_error_rate is not None:
                print(f"   WER: {result.quality_metrics.word_error_rate:.1%}")
            if result.quality_metrics.improvement_suggestions:
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(result.quality_metrics.improvement_suggestions)}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ensemble
        if result.provider_metadata and 'ensemble_size' in result.provider_metadata:
            print(f"\\nü§ñ ENSEMBLE –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: {result.provider_metadata['ensemble_size']}")
            print(f"   –ú–æ–¥–µ–ª–∏: {', '.join(result.provider_metadata['models_used'])}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.provider_metadata.get('avg_confidence', 0):.1%}")
        
        # –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        print(f"\\nüí¨ –¢–ï–ö–°–¢:")
        print("-" * 80)
        print(result.text)
        print("-" * 80)
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = "‚úÖ" if result.status.value == "completed" else "‚ùå"
        print(f"\\n{status_emoji} –°—Ç–∞—Ç—É—Å: {result.status.value}")
        
        if result.error_message:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result.error_message}")
        
        print("=" * 80 + "\\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ Enhanced Transcriber Demo - –ö–∞—á–µ—Å—Ç–≤–æ 95%+")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ
    demo = EnhancedTranscriberDemo()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π
    print("\\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å OpenAI API –∫–ª—é—á –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    # openai_key = "sk-your-openai-key-here"
    openai_key = None  # –ü–æ–∫–∞ –±–µ–∑ OpenAI
    
    model_info = await demo.setup_models(openai_key)
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
    print("\\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for info in model_info:
        status_emoji = {"available": "‚úÖ", "unavailable": "‚ùå", "skipped": "‚è≠Ô∏è"}
        emoji = status_emoji.get(info["status"], "‚ùì")
        print(f"   {emoji} {info['name']}: {info['status']}")
        if info.get("reason"):
            print(f"      –ü—Ä–∏—á–∏–Ω–∞: {info['reason']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ–º–æ
    demo_audio_files = [
        "demo_audio.wav",
        "test_audio.mp3", 
        "../audio/sample.wav",
        "sample_audio.wav"
    ]
    
    demo_file = None
    for audio_file in demo_audio_files:
        if Path(audio_file).exists():
            demo_file = audio_file
            break
    
    if demo_file:
        print(f"\\nüéµ –ù–∞–π–¥–µ–Ω –¥–µ–º–æ —Ñ–∞–π–ª: {demo_file}")
        
        try:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            result = await demo.transcribe_audio(
                audio_file=demo_file,
                language="ru",
                domain="ecommerce",
                use_ensemble=True
            )
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            demo.print_transcription_result(result)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            logger.error(f"Transcription failed: {e}")
    
    else:
        print("\\n‚ö†Ô∏è –î–µ–º–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª (demo_audio.wav, test_audio.mp3 –∏ —Ç.–¥.) –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É")
        print("   –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É –≤ –∫–æ–¥–µ.")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ensemble
        if demo.ensemble_service:
            ensemble_info = demo.ensemble_service.get_ensemble_info()
            print("\\nü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± Ensemble —Å–µ—Ä–≤–∏—Å–µ:")
            print(f"   –ú–æ–¥–µ–ª–∏: {ensemble_info['models_count']}")
            print(f"   –¶–µ–ª–µ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {ensemble_info['target_quality_threshold']:.1%}")
            print(f"   –ú–µ—Ç–æ–¥ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {ensemble_info['consensus_method']}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
    asyncio.run(main())