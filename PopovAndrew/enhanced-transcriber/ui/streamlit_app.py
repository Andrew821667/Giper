"""
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Enhanced Transcriber
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
"""

import streamlit as st
import asyncio
import os
from pathlib import Path
import time
import librosa

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
import sys
sys.path.append(".")
from enhanced_transcriber import EnhancedTranscriber

st.set_page_config(
    page_title="Enhanced Transcriber",
    page_icon="üéôÔ∏è",
    layout="wide"
)

@st.cache_resource
def load_transcriber():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    system = EnhancedTranscriber(
        openai_api_key=None,
        target_quality=0.98,
        enable_audio_enhancement=True,
        enable_quality_assessment=True,
        domain="ecommerce"
    )
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Streamlit
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(system.initialize())
    return system

def format_with_roles(text, timestamps=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ–ª—è–º–∏ K:/M:"""
    lines = text.split('.')
    formatted = []
    
    for i, line in enumerate(lines):
        if line.strip():
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —á–µ—Ç–Ω—ã–µ - –∫–ª–∏–µ–Ω—Ç, –Ω–µ—á–µ—Ç–Ω—ã–µ - –º–µ–Ω–µ–¥–∂–µ—Ä
            role = "K" if i % 2 == 0 else "M"
            timestamp = f"[{i*10:02d}:{(i*10)%60:02d}]" if timestamps else ""
            formatted.append(f"{role}: {timestamp} {line.strip()}")
    
    return "\n".join(formatted)

def main():
    st.title("üéôÔ∏è Enhanced Transcriber")
    st.markdown("**–°–∏—Å—Ç–µ–º–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: T-one + Whisper Large-v3 + GPU**")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò..."):
        system = load_transcriber()
    
    st.success(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ú–æ–¥–µ–ª–∏: {len(system.models)}")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    language = st.sidebar.selectbox("–Ø–∑—ã–∫", ["ru", "en", "auto"], index=0)
    output_format = st.sidebar.radio("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", ["–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", "–° —Ä–æ–ª—è–º–∏ K:/M:", "–° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"])
    confidence_threshold = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.5)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", 
        type=['wav', 'mp3', 'm4a', 'flac', 'ogg'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, M4A, FLAC, OGG"
    )
    
    if uploaded_file is not None:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{uploaded_file.size / (1024*1024):.1f} MB")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_path = f"/tmp/{uploaded_file.name}"
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        try:
            duration = librosa.get_duration(path=temp_path)
            with col2:
                st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{duration:.1f}s")
            with col3:
                estimated_time = duration * 0.3  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                st.metric("~–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{estimated_time:.1f}s")
        except:
            pass
        
        # –ö–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", type="primary"):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            start_time = time.time()
            
            try:
                status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...")
                progress_bar.progress(25)
                
                # –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(
                    system.transcribe(temp_path, language=language)
                )
                
                progress_bar.progress(100)
                processing_time = time.time() - start_time
                
                if result and result.text and result.confidence >= confidence_threshold:
                    status_text.text("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result.confidence:.1%}")
                    with col2:
                        st.metric("–ú–æ–¥–µ–ª—å", result.model_used)
                    with col3:
                        st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.processing_time:.1f}s")
                    with col4:
                        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", result.word_count)
                    
                    # –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    st.header("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
                    
                    if output_format == "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç":
                        formatted_text = result.text
                    elif output_format == "–° —Ä–æ–ª—è–º–∏ K:/M:":
                        formatted_text = format_with_roles(result.text)
                    else:  # –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                        formatted_text = format_with_roles(result.text, timestamps=True)
                    
                    st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", formatted_text, height=300)
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é",
                        data=formatted_text,
                        file_name=f"transcript_{uploaded_file.name}.txt",
                        mime="text/plain"
                    )
                    
                else:
                    st.error(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞—è –∏–ª–∏ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({result.confidence:.1%})")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if os.path.exists(temp_path):
                    os.remove(temp_path)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.sidebar.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
    st.sidebar.info(
        "Enhanced Transcriber –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:\n"
        "‚Ä¢ T-one ASR (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)\n" 
        "‚Ä¢ Whisper Large-v3 (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)\n"
        "‚Ä¢ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ Tesla P100\n"
        "‚Ä¢ –ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )

if __name__ == "__main__":
    main()
